// DO NOT EDIT
// Generated by JFlex 1.8.0 http://jflex.de/
// source: lexerinput.txt

/* User code */

package lexer;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class DumplingLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\2\0\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\0\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\2\34\1\41"+
    "\2\34\1\42\1\43\2\34\1\44\1\45\2\34\1\46"+
    "\3\34\1\47\1\50\1\51\3\0\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\34\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\34\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\34\1\77\1\34\1\100"+
    "\1\0\1\101\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\1\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\13\23\1\24\1\25\6\23"+
    "\1\26\1\23\1\26\3\23\1\26\3\23\1\27\1\30"+
    "\1\31\1\32\1\31\1\33\2\31\1\34\43\31\1\35"+
    "\1\36\1\37\1\40\1\41\2\26\2\0\1\42\1\43"+
    "\1\44\1\45\23\23\1\46\1\23\1\47\1\50\6\23"+
    "\1\51\3\23\2\31\1\52\1\53\1\54\1\55\1\0"+
    "\1\56\6\23\1\57\1\60\2\23\1\61\6\23\1\62"+
    "\1\63\1\23\1\64\3\23\1\65\6\23\1\56\1\23"+
    "\1\66\1\67\3\23\1\70\3\23\1\71\3\23\1\72"+
    "\3\23\1\73\5\23\1\74\1\23\1\75\1\23\1\76"+
    "\1\77\4\23\1\100\1\23\1\101\1\102\2\23\1\103"+
    "\2\23\1\104\1\105\1\106\5\23\1\107\5\23\1\110"+
    "\1\111\24\23\1\112\3\23\1\113\1\114\1\23\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\306\0\306\0\306\0\u0108"+
    "\0\306\0\306\0\306\0\u014a\0\u018c\0\u01ce\0\u0210\0\u0252"+
    "\0\u0294\0\306\0\306\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\306\0\306\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a"+
    "\0\u07bc\0\u04a4\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948"+
    "\0\u098a\0\u09cc\0\u0a0e\0\306\0\306\0\u0a50\0\306\0\u0a92"+
    "\0\u0ad4\0\306\0\u0108\0\306\0\u014a\0\u018c\0\u01ce\0\u0210"+
    "\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420"+
    "\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630"+
    "\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840"+
    "\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\306"+
    "\0\306\0\306\0\306\0\u0210\0\306\0\u0b16\0\u0b58\0\u0b9a"+
    "\0\306\0\306\0\306\0\306\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2"+
    "\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u04a4"+
    "\0\u10c2\0\u04a4\0\u04a4\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c"+
    "\0\u124e\0\u04a4\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\306"+
    "\0\306\0\306\0\306\0\u13da\0\306\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\u04a4\0\u04a4\0\u15a8\0\u15ea\0\u04a4"+
    "\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u04a4\0\u04a4"+
    "\0\u17b8\0\u04a4\0\u17fa\0\u183c\0\u187e\0\u04a4\0\u18c0\0\u1902"+
    "\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u0b58\0\u1a4c\0\u04a4\0\u04a4"+
    "\0\u1a8e\0\u1ad0\0\u1b12\0\u04a4\0\u1b54\0\u1b96\0\u1bd8\0\u04a4"+
    "\0\u1c1a\0\u1c5c\0\u1c9e\0\u04a4\0\u1ce0\0\u1d22\0\u1d64\0\u04a4"+
    "\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u04a4\0\u1ef0\0\u04a4"+
    "\0\u1f32\0\u04a4\0\u04a4\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u04a4"+
    "\0\u207c\0\u04a4\0\u04a4\0\u20be\0\u2100\0\u04a4\0\u2142\0\u2184"+
    "\0\u04a4\0\u04a4\0\u04a4\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce"+
    "\0\u04a4\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418\0\u04a4\0\u04a4"+
    "\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628"+
    "\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838"+
    "\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u04a4\0\u2982\0\u29c4\0\u2a06"+
    "\0\u04a4\0\u04a4\0\u2a48\0\u04a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\3\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\33\1\35\1\36\1\37\2\33"+
    "\1\40\1\41\1\33\1\42\1\4\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\33\1\52\1\53\2\33"+
    "\1\54\1\33\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\33\1\63\1\33\1\64\1\65\2\66\1\5\2\66"+
    "\1\5\2\66\1\67\10\66\1\70\26\66\1\71\31\66"+
    "\2\72\1\5\2\72\2\5\1\72\1\4\1\73\1\74"+
    "\2\72\1\75\1\76\1\77\1\100\1\101\1\102\2\72"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\112\1\114\1\115\1\116\2\112\1\117\1\120"+
    "\1\112\1\72\1\4\1\72\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\2\112\1\127\2\112\1\130\1\112\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\1\112\1\137\1\112"+
    "\2\72\130\0\1\140\101\0\1\141\101\0\1\142\101\0"+
    "\1\143\75\0\1\144\36\0\1\145\3\0\1\146\4\0"+
    "\1\145\24\0\1\147\3\0\1\150\4\0\1\151\73\0"+
    "\1\144\1\0\1\21\36\0\1\145\3\0\1\146\4\0"+
    "\1\145\35\0\1\152\101\0\1\153\101\0\1\154\75\0"+
    "\1\33\5\0\17\33\3\0\14\33\1\155\11\33\24\0"+
    "\1\33\5\0\17\33\3\0\15\33\1\156\10\33\24\0"+
    "\1\33\5\0\17\33\3\0\7\33\1\157\16\33\24\0"+
    "\1\33\5\0\17\33\3\0\10\33\1\160\15\33\24\0"+
    "\1\33\5\0\17\33\3\0\26\33\24\0\1\33\5\0"+
    "\17\33\3\0\12\33\1\161\13\33\24\0\1\33\5\0"+
    "\10\33\1\162\6\33\3\0\26\33\24\0\1\33\5\0"+
    "\17\33\3\0\14\33\1\163\11\33\24\0\1\33\5\0"+
    "\12\33\1\164\4\33\3\0\26\33\24\0\1\33\5\0"+
    "\17\33\3\0\21\33\1\165\4\33\24\0\1\33\5\0"+
    "\17\33\3\0\10\33\1\166\15\33\24\0\1\33\5\0"+
    "\17\33\3\0\14\33\1\167\11\33\24\0\1\33\5\0"+
    "\17\33\3\0\17\33\1\170\6\33\24\0\1\33\5\0"+
    "\17\33\3\0\15\33\1\171\10\33\24\0\1\33\5\0"+
    "\17\33\3\0\4\33\1\172\21\33\24\0\1\33\5\0"+
    "\17\33\3\0\12\33\1\173\10\33\1\174\2\33\24\0"+
    "\1\33\5\0\17\33\3\0\1\175\14\33\1\176\4\33"+
    "\1\177\3\33\24\0\1\33\5\0\17\33\3\0\5\33"+
    "\1\200\20\33\24\0\1\33\5\0\17\33\3\0\15\33"+
    "\1\201\2\33\1\52\5\33\24\0\1\33\5\0\17\33"+
    "\3\0\14\33\1\202\2\33\1\203\6\33\24\0\1\33"+
    "\5\0\17\33\3\0\10\33\1\204\15\33\24\0\1\33"+
    "\5\0\17\33\3\0\4\33\1\205\3\33\1\206\15\33"+
    "\24\0\1\33\5\0\17\33\3\0\4\33\1\207\14\33"+
    "\1\210\4\33\24\0\1\33\5\0\17\33\3\0\4\33"+
    "\1\211\10\33\1\212\1\33\1\213\6\33\24\0\1\33"+
    "\5\0\17\33\3\0\14\33\1\214\11\33\24\0\1\33"+
    "\5\0\17\33\3\0\7\33\1\215\16\33\2\0\2\66"+
    "\1\0\2\66\1\0\2\66\1\0\37\66\1\0\33\66"+
    "\1\0\2\66\1\0\2\66\1\0\4\66\1\216\3\66"+
    "\1\217\26\66\1\0\31\66\10\0\1\220\55\0\1\221"+
    "\2\0\1\222\1\0\1\223\100\0\1\145\7\0\2\147"+
    "\4\0\7\147\1\224\64\147\2\150\1\225\3\0\74\150"+
    "\22\0\1\33\5\0\17\33\3\0\1\226\25\33\24\0"+
    "\1\33\5\0\17\33\3\0\15\33\1\227\10\33\24\0"+
    "\1\33\5\0\17\33\3\0\1\230\25\33\24\0\1\33"+
    "\5\0\17\33\3\0\6\33\1\231\17\33\24\0\1\33"+
    "\5\0\17\33\3\0\15\33\1\232\10\33\24\0\1\33"+
    "\5\0\6\33\1\233\10\33\3\0\26\33\24\0\1\33"+
    "\5\0\17\33\3\0\21\33\1\234\4\33\24\0\1\33"+
    "\5\0\16\33\1\235\3\0\26\33\24\0\1\33\5\0"+
    "\17\33\3\0\17\33\1\236\6\33\24\0\1\33\5\0"+
    "\17\33\3\0\13\33\1\237\12\33\24\0\1\33\5\0"+
    "\17\33\3\0\3\33\1\240\22\33\24\0\1\33\5\0"+
    "\17\33\3\0\4\33\1\241\21\33\24\0\1\33\5\0"+
    "\17\33\3\0\14\33\1\242\11\33\24\0\1\33\5\0"+
    "\17\33\3\0\12\33\1\243\13\33\24\0\1\33\5\0"+
    "\17\33\3\0\20\33\1\244\5\33\24\0\1\33\5\0"+
    "\17\33\3\0\4\33\1\245\21\33\24\0\1\33\5\0"+
    "\17\33\3\0\12\33\1\246\13\33\24\0\1\33\5\0"+
    "\17\33\3\0\17\33\1\247\6\33\24\0\1\33\5\0"+
    "\17\33\3\0\14\33\1\250\11\33\24\0\1\33\5\0"+
    "\17\33\3\0\3\33\1\251\22\33\24\0\1\33\5\0"+
    "\17\33\3\0\14\33\1\252\11\33\24\0\1\33\5\0"+
    "\17\33\3\0\1\253\20\33\1\254\4\33\24\0\1\33"+
    "\5\0\17\33\3\0\20\33\1\255\5\33\24\0\1\33"+
    "\5\0\17\33\3\0\21\33\1\256\4\33\24\0\1\33"+
    "\5\0\17\33\3\0\1\257\14\33\1\260\10\33\24\0"+
    "\1\33\5\0\17\33\3\0\13\33\1\261\12\33\24\0"+
    "\1\33\5\0\17\33\3\0\22\33\1\262\3\33\24\0"+
    "\1\33\5\0\17\33\3\0\21\33\1\263\4\33\24\0"+
    "\1\33\5\0\17\33\3\0\10\33\1\264\15\33\2\0"+
    "\2\216\1\0\2\66\1\0\2\216\1\147\37\216\1\147"+
    "\31\216\2\217\1\225\2\66\1\0\2\217\1\150\37\217"+
    "\1\150\31\217\2\147\4\0\7\147\1\224\3\147\1\265"+
    "\60\147\22\0\1\33\5\0\17\33\3\0\12\33\1\266"+
    "\13\33\24\0\1\33\5\0\17\33\3\0\12\33\1\267"+
    "\13\33\24\0\1\33\5\0\17\33\3\0\17\33\1\270"+
    "\6\33\24\0\1\33\5\0\17\33\3\0\10\33\1\271"+
    "\15\33\24\0\1\33\5\0\17\33\3\0\1\272\25\33"+
    "\24\0\1\33\5\0\7\33\1\235\7\33\3\0\26\33"+
    "\24\0\1\33\5\0\17\33\3\0\10\33\1\273\15\33"+
    "\24\0\1\33\5\0\17\33\3\0\4\33\1\274\21\33"+
    "\24\0\1\33\5\0\17\33\3\0\1\275\25\33\24\0"+
    "\1\33\5\0\17\33\3\0\21\33\1\276\4\33\24\0"+
    "\1\33\5\0\17\33\3\0\1\277\25\33\24\0\1\33"+
    "\5\0\17\33\3\0\4\33\1\300\21\33\24\0\1\33"+
    "\5\0\17\33\3\0\17\33\1\301\6\33\24\0\1\33"+
    "\5\0\17\33\3\0\12\33\1\302\5\33\1\262\5\33"+
    "\24\0\1\33\5\0\17\33\3\0\22\33\1\303\3\33"+
    "\24\0\1\33\5\0\17\33\3\0\3\33\1\304\22\33"+
    "\24\0\1\33\5\0\17\33\3\0\22\33\1\305\3\33"+
    "\24\0\1\33\5\0\17\33\3\0\10\33\1\306\15\33"+
    "\24\0\1\33\5\0\17\33\3\0\17\33\1\307\6\33"+
    "\24\0\1\33\5\0\17\33\3\0\16\33\1\310\7\33"+
    "\24\0\1\33\5\0\17\33\3\0\16\33\1\311\7\33"+
    "\24\0\1\33\5\0\17\33\3\0\4\33\1\235\21\33"+
    "\24\0\1\33\5\0\17\33\3\0\10\33\1\312\15\33"+
    "\24\0\1\33\5\0\17\33\3\0\12\33\1\313\13\33"+
    "\24\0\1\33\5\0\17\33\3\0\15\33\1\314\10\33"+
    "\24\0\1\33\5\0\17\33\3\0\21\33\1\315\4\33"+
    "\24\0\1\33\5\0\17\33\3\0\21\33\1\316\4\33"+
    "\24\0\1\33\5\0\17\33\3\0\14\33\1\317\11\33"+
    "\24\0\1\33\5\0\17\33\3\0\11\33\1\320\14\33"+
    "\24\0\1\33\5\0\17\33\3\0\10\33\1\321\15\33"+
    "\24\0\1\33\5\0\17\33\3\0\25\33\1\322\24\0"+
    "\1\33\5\0\17\33\3\0\25\33\1\323\24\0\1\33"+
    "\5\0\17\33\3\0\10\33\1\324\15\33\24\0\1\33"+
    "\5\0\17\33\3\0\12\33\1\325\13\33\24\0\1\33"+
    "\5\0\17\33\3\0\17\33\1\326\6\33\24\0\1\33"+
    "\5\0\17\33\3\0\14\33\1\327\11\33\24\0\1\33"+
    "\5\0\17\33\3\0\21\33\1\330\4\33\24\0\1\33"+
    "\5\0\17\33\3\0\12\33\1\331\13\33\24\0\1\33"+
    "\5\0\17\33\3\0\12\33\1\332\13\33\24\0\1\33"+
    "\5\0\17\33\3\0\4\33\1\333\21\33\24\0\1\33"+
    "\5\0\17\33\3\0\6\33\1\334\17\33\24\0\1\33"+
    "\5\0\17\33\3\0\1\335\25\33\24\0\1\33\5\0"+
    "\17\33\3\0\6\33\1\336\17\33\24\0\1\33\5\0"+
    "\17\33\3\0\14\33\1\337\11\33\24\0\1\33\5\0"+
    "\17\33\3\0\14\33\1\340\11\33\24\0\1\33\5\0"+
    "\17\33\3\0\4\33\1\341\21\33\24\0\1\33\5\0"+
    "\17\33\3\0\14\33\1\342\11\33\24\0\1\33\5\0"+
    "\17\33\3\0\6\33\1\343\17\33\24\0\1\33\5\0"+
    "\17\33\3\0\1\344\25\33\24\0\1\33\5\0\10\33"+
    "\1\345\1\33\1\346\4\33\3\0\26\33\24\0\1\33"+
    "\5\0\17\33\3\0\12\33\1\347\13\33\24\0\1\33"+
    "\5\0\17\33\3\0\22\33\1\350\3\33\24\0\1\33"+
    "\5\0\17\33\3\0\6\33\1\351\17\33\24\0\1\33"+
    "\5\0\17\33\3\0\21\33\1\352\4\33\24\0\1\33"+
    "\5\0\17\33\3\0\14\33\1\353\11\33\24\0\1\33"+
    "\5\0\17\33\3\0\22\33\1\354\3\33\24\0\1\33"+
    "\5\0\10\33\1\355\1\33\1\356\4\33\3\0\26\33"+
    "\24\0\1\33\5\0\17\33\3\0\4\33\1\357\21\33"+
    "\24\0\1\33\5\0\17\33\3\0\4\33\1\360\21\33"+
    "\24\0\1\33\5\0\17\33\3\0\16\33\1\361\7\33"+
    "\24\0\1\33\5\0\17\33\3\0\21\33\1\362\4\33"+
    "\24\0\1\33\5\0\17\33\3\0\14\33\1\363\11\33"+
    "\24\0\1\33\5\0\17\33\3\0\22\33\1\364\3\33"+
    "\24\0\1\33\5\0\17\33\3\0\22\33\1\365\3\33"+
    "\24\0\1\33\5\0\17\33\3\0\16\33\1\366\7\33"+
    "\24\0\1\33\5\0\17\33\3\0\16\33\1\367\7\33"+
    "\24\0\1\33\5\0\17\33\3\0\21\33\1\370\4\33"+
    "\24\0\1\33\5\0\17\33\3\0\21\33\1\371\4\33"+
    "\24\0\1\33\5\0\17\33\3\0\22\33\1\372\3\33"+
    "\24\0\1\33\5\0\17\33\3\0\22\33\1\373\3\33"+
    "\24\0\1\33\5\0\17\33\3\0\16\33\1\374\7\33"+
    "\24\0\1\33\5\0\13\33\1\375\3\33\3\0\26\33"+
    "\24\0\1\33\5\0\17\33\3\0\21\33\1\376\4\33"+
    "\24\0\1\33\5\0\17\33\3\0\21\33\1\377\4\33"+
    "\24\0\1\33\5\0\17\33\3\0\22\33\1\u0100\3\33"+
    "\24\0\1\33\5\0\17\33\3\0\10\33\1\u0101\15\33"+
    "\24\0\1\33\5\0\13\33\1\u0102\3\33\3\0\26\33"+
    "\24\0\1\33\5\0\13\33\1\u0103\3\33\3\0\26\33"+
    "\24\0\1\33\5\0\17\33\3\0\21\33\1\u0104\4\33"+
    "\24\0\1\33\5\0\17\33\3\0\14\33\1\u0105\11\33"+
    "\24\0\1\33\5\0\17\33\3\0\10\33\1\u0106\15\33"+
    "\24\0\1\33\5\0\17\33\3\0\10\33\1\u0107\15\33"+
    "\24\0\1\33\5\0\13\33\1\u0108\3\33\3\0\26\33"+
    "\24\0\1\33\5\0\17\33\3\0\14\33\1\u0109\11\33"+
    "\24\0\1\33\5\0\17\33\3\0\14\33\1\u010a\11\33"+
    "\24\0\1\33\5\0\17\33\3\0\10\33\1\u010b\15\33"+
    "\24\0\1\33\5\0\17\33\3\0\14\33\1\u010c\11\33"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10890];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\4\11\1\1\3\11\6\1\2\11\16\1\2\11"+
    "\20\1\2\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\43\1\4\11\1\1\1\11\1\1\2\0\4\11\43\1"+
    "\4\11\1\0\1\11\167\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
   StringBuffer string = new StringBuffer();

   private Symbol symbol(SymType type) {
      return new Symbol(type, yyline, yycolumn);
   }
   private Symbol symbol(SymType type, Object value) {
      return new Symbol(type, yyline, yycolumn, value);
   }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DumplingLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error");
            }
            // fall through
          case 78: break;
          case 2:
            { 
            }
            // fall through
          case 79: break;
          case 3:
            { return symbol(SymType.NOT);
            }
            // fall through
          case 80: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 81: break;
          case 5:
            { return symbol(SymType.MODULO);
            }
            // fall through
          case 82: break;
          case 6:
            { string.setLength(0); yybegin(CHAR);
            }
            // fall through
          case 83: break;
          case 7:
            { return symbol(SymType.LPAREN);
            }
            // fall through
          case 84: break;
          case 8:
            { return symbol(SymType.RPAREN);
            }
            // fall through
          case 85: break;
          case 9:
            { return symbol(SymType.MULTIPLY);
            }
            // fall through
          case 86: break;
          case 10:
            { return symbol(SymType.PLUS);
            }
            // fall through
          case 87: break;
          case 11:
            { return symbol(SymType.MINUS);
            }
            // fall through
          case 88: break;
          case 12:
            { return symbol(SymType.DIVIDE);
            }
            // fall through
          case 89: break;
          case 13:
            { return symbol(SymType.INTLITERAL, yytext());
            }
            // fall through
          case 90: break;
          case 14:
            { return symbol(SymType.RETURNTYPE);
            }
            // fall through
          case 91: break;
          case 15:
            { return symbol(SymType.SEMICOLON);
            }
            // fall through
          case 92: break;
          case 16:
            { return symbol(SymType.LESSTHAN);
            }
            // fall through
          case 93: break;
          case 17:
            { return symbol(SymType.ASSIGN);
            }
            // fall through
          case 94: break;
          case 18:
            { return symbol(SymType.GREATERTHAN);
            }
            // fall through
          case 95: break;
          case 19:
            { return symbol(SymType.IDENTIFIER, yytext());
            }
            // fall through
          case 96: break;
          case 20:
            { return symbol(SymType.LBRACKET);
            }
            // fall through
          case 97: break;
          case 21:
            { return symbol(SymType.RBRACKET);
            }
            // fall through
          case 98: break;
          case 22:
            { return symbol(SymType.TIMELITERAL, yytext());
            }
            // fall through
          case 99: break;
          case 23:
            { return symbol(SymType.LBRACE);
            }
            // fall through
          case 100: break;
          case 24:
            { return symbol(SymType.RBRACE);
            }
            // fall through
          case 101: break;
          case 25:
            { string.append(yytext());
            }
            // fall through
          case 102: break;
          case 26:
            { yybegin(YYINITIAL); return symbol(SymType.STRING, string.toString());
            }
            // fall through
          case 103: break;
          case 27:
            { string.append('\\');
            }
            // fall through
          case 104: break;
          case 28:
            { yybegin(YYINITIAL); return symbol(SymType.CHAR, string.toString());
            }
            // fall through
          case 105: break;
          case 29:
            { return symbol(SymType.MODULOASSIGN);
            }
            // fall through
          case 106: break;
          case 30:
            { return symbol(SymType.MULTIPLYASSIGN);
            }
            // fall through
          case 107: break;
          case 31:
            { return symbol(SymType.PLUSASSIGN);
            }
            // fall through
          case 108: break;
          case 32:
            { return symbol(SymType.MINUSASSIGN);
            }
            // fall through
          case 109: break;
          case 33:
            { return symbol(SymType.FLOATLITERAL, yytext());
            }
            // fall through
          case 110: break;
          case 34:
            { return symbol(SymType.DIVIDEASSIGN);
            }
            // fall through
          case 111: break;
          case 35:
            { return symbol(SymType.LESSTHANOREQUALTO);
            }
            // fall through
          case 112: break;
          case 36:
            { return symbol(SymType.EQUAL);
            }
            // fall through
          case 113: break;
          case 37:
            { return symbol(SymType.GREATERTHANOREQUALTO);
            }
            // fall through
          case 114: break;
          case 38:
            { return symbol(SymType.IF);
            }
            // fall through
          case 115: break;
          case 39:
            { return symbol(SymType.ON);
            }
            // fall through
          case 116: break;
          case 40:
            { return symbol(SymType.OR);
            }
            // fall through
          case 117: break;
          case 41:
            { return symbol(SymType.TO);
            }
            // fall through
          case 118: break;
          case 42:
            { string.append('\"');
            }
            // fall through
          case 119: break;
          case 43:
            { string.append('\n');
            }
            // fall through
          case 120: break;
          case 44:
            { string.append('\r');
            }
            // fall through
          case 121: break;
          case 45:
            { string.append('\t');
            }
            // fall through
          case 122: break;
          case 46:
            { return symbol(SymType.COMMENT, yytext());
            }
            // fall through
          case 123: break;
          case 47:
            { return symbol(SymType.INTTYPE);
            }
            // fall through
          case 124: break;
          case 48:
            { return symbol(SymType.BOOLLITERAL, yytext());
            }
            // fall through
          case 125: break;
          case 49:
            { return symbol(SymType.AND);
            }
            // fall through
          case 126: break;
          case 50:
            { return symbol(SymType.FOR);
            }
            // fall through
          case 127: break;
          case 51:
            { return symbol(SymType.FUN);
            }
            // fall through
          case 128: break;
          case 52:
            { return symbol(SymType.PIN);
            }
            // fall through
          case 129: break;
          case 53:
            { return symbol(SymType.SET);
            }
            // fall through
          case 130: break;
          case 54:
            { return symbol(SymType.BOOLTYPE);
            }
            // fall through
          case 131: break;
          case 55:
            { return symbol(SymType.CHARTYPE);
            }
            // fall through
          case 132: break;
          case 56:
            { return symbol(SymType.TIME);
            }
            // fall through
          case 133: break;
          case 57:
            { return symbol(SymType.ELSE);
            }
            // fall through
          case 134: break;
          case 58:
            { return symbol(SymType.READ);
            }
            // fall through
          case 135: break;
          case 59:
            { return symbol(SymType.STOP);
            }
            // fall through
          case 136: break;
          case 60:
            { return symbol(SymType.FLOATTYPE);
            }
            // fall through
          case 137: break;
          case 61:
            { return symbol(SymType.BREAK);
            }
            // fall through
          case 138: break;
          case 62:
            { return symbol(SymType.DELAY);
            }
            // fall through
          case 139: break;
          case 63:
            { return symbol(SymType.EVERY);
            }
            // fall through
          case 140: break;
          case 64:
            { return symbol(SymType.START);
            }
            // fall through
          case 141: break;
          case 65:
            { return symbol(SymType.UNTIL);
            }
            // fall through
          case 142: break;
          case 66:
            { return symbol(SymType.WHILE);
            }
            // fall through
          case 143: break;
          case 67:
            { return symbol(SymType.STRINGTYPE);
            }
            // fall through
          case 144: break;
          case 68:
            { return symbol(SymType.MODULE);
            }
            // fall through
          case 145: break;
          case 69:
            { return symbol(SymType.RETURN);
            }
            // fall through
          case 146: break;
          case 70:
            { return symbol(SymType.RISING);
            }
            // fall through
          case 147: break;
          case 71:
            { return symbol(SymType.FALLING);
            }
            // fall through
          case 148: break;
          case 72:
            { return symbol(SymType.CONTINUE);
            }
            // fall through
          case 149: break;
          case 73:
            { return symbol(SymType.TEMPLATE);
            }
            // fall through
          case 150: break;
          case 74:
            { return symbol(SymType.ANALOGINPUTPINTYPE);
            }
            // fall through
          case 151: break;
          case 75:
            { return symbol(SymType.ANALOGOUTPUTPINTYPE);
            }
            // fall through
          case 152: break;
          case 76:
            { return symbol(SymType.DIGITALINPUTPINTYPE);
            }
            // fall through
          case 153: break;
          case 77:
            { return symbol(SymType.DIGITALOUTPUTPINTYPE);
            }
            // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
