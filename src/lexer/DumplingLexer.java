// DO NOT EDIT
// Generated by JFlex 1.8.0 http://jflex.de/
// source: lexerinput.txt

/* User code */

package lexer;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class DumplingLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\2\0\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\12\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\35\1\42"+
    "\2\35\1\43\1\44\2\35\1\45\1\46\2\35\1\47"+
    "\3\35\1\50\1\51\1\52\3\0\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\35\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\35\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\35\1\100\1\35\1\101"+
    "\1\0\1\102\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\1\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\13\24\1\25\1\26"+
    "\6\24\1\27\1\24\1\27\3\24\1\27\3\24\1\30"+
    "\1\31\1\32\1\33\1\32\1\34\3\32\1\35\43\32"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\27\2\0"+
    "\1\44\1\45\1\46\1\47\23\24\1\50\1\24\1\51"+
    "\1\52\6\24\1\53\3\24\2\32\1\54\1\55\1\56"+
    "\1\57\1\0\1\2\6\24\1\60\1\61\2\24\1\62"+
    "\6\24\1\63\1\64\1\24\1\65\3\24\1\66\6\24"+
    "\1\2\1\24\1\67\1\70\3\24\1\71\3\24\1\72"+
    "\3\24\1\73\3\24\1\74\5\24\1\75\1\24\1\76"+
    "\1\24\1\77\1\100\4\24\1\101\1\24\1\102\1\103"+
    "\2\24\1\104\2\24\1\105\1\106\1\107\5\24\1\110"+
    "\5\24\1\111\1\112\24\24\1\113\3\24\1\114\1\115"+
    "\1\24\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\311\0\u010c\0\311\0\u014f"+
    "\0\311\0\311\0\311\0\u0192\0\u01d5\0\311\0\u0218\0\u025b"+
    "\0\u029e\0\u02e1\0\311\0\311\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\311\0\311\0\u06ce\0\u0711\0\u0754\0\u0797"+
    "\0\u07da\0\u081d\0\u04f9\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c"+
    "\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\311\0\311\0\u0abb\0\311"+
    "\0\u0afe\0\u0b41\0\311\0\u010c\0\u014f\0\311\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\311\0\311\0\311\0\311\0\311\0\u025b\0\311"+
    "\0\u0b84\0\u0bc7\0\u0c0a\0\311\0\311\0\311\0\311\0\u0c4d"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d"+
    "\0\u10c0\0\u1103\0\u04f9\0\u1146\0\u04f9\0\u04f9\0\u1189\0\u11cc"+
    "\0\u120f\0\u1252\0\u1295\0\u12d8\0\u04f9\0\u131b\0\u135e\0\u13a1"+
    "\0\u13e4\0\u1427\0\311\0\311\0\311\0\311\0\u146a\0\u0c0a"+
    "\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u04f9\0\u04f9"+
    "\0\u163f\0\u1682\0\u04f9\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1"+
    "\0\u1814\0\u04f9\0\u04f9\0\u1857\0\u04f9\0\u189a\0\u18dd\0\u1920"+
    "\0\u04f9\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u0bc7"+
    "\0\u1af5\0\u04f9\0\u04f9\0\u1b38\0\u1b7b\0\u1bbe\0\u04f9\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u04f9\0\u1cca\0\u1d0d\0\u1d50\0\u04f9\0\u1d93"+
    "\0\u1dd6\0\u1e19\0\u04f9\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68"+
    "\0\u04f9\0\u1fab\0\u04f9\0\u1fee\0\u04f9\0\u04f9\0\u2031\0\u2074"+
    "\0\u20b7\0\u20fa\0\u04f9\0\u213d\0\u04f9\0\u04f9\0\u2180\0\u21c3"+
    "\0\u04f9\0\u2206\0\u2249\0\u04f9\0\u04f9\0\u04f9\0\u228c\0\u22cf"+
    "\0\u2312\0\u2355\0\u2398\0\u04f9\0\u23db\0\u241e\0\u2461\0\u24a4"+
    "\0\u24e7\0\u04f9\0\u04f9\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636"+
    "\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e"+
    "\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u04f9"+
    "\0\u2a66\0\u2aa9\0\u2aec\0\u04f9\0\u04f9\0\u2b2f\0\u04f9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\3\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\34\1\36\1\37\1\40"+
    "\2\34\1\41\1\42\1\34\1\43\1\4\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\34\1\53\1\54"+
    "\2\34\1\55\1\34\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\34\1\64\1\34\1\65\1\66\2\67\1\5"+
    "\2\67\1\5\2\67\1\70\11\67\1\71\26\67\1\72"+
    "\31\67\2\73\1\5\2\73\2\5\1\74\1\4\1\75"+
    "\1\76\2\73\1\77\1\100\1\73\1\101\1\102\1\103"+
    "\1\104\2\73\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\114\1\116\1\117\1\120\2\114"+
    "\1\121\1\122\1\114\1\73\1\4\1\73\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\2\114\1\131\2\114\1\132"+
    "\1\114\1\133\1\134\1\135\1\136\1\137\1\140\1\114"+
    "\1\141\1\114\2\73\132\0\1\142\102\0\1\143\102\0"+
    "\1\144\102\0\1\145\102\0\1\146\76\0\1\147\36\0"+
    "\1\150\3\0\1\151\4\0\1\150\24\0\1\152\4\0"+
    "\1\153\4\0\1\154\74\0\1\147\1\0\1\22\36\0"+
    "\1\150\3\0\1\151\4\0\1\150\36\0\1\155\102\0"+
    "\1\156\102\0\1\157\76\0\1\34\5\0\17\34\3\0"+
    "\14\34\1\160\11\34\25\0\1\34\5\0\17\34\3\0"+
    "\15\34\1\161\10\34\25\0\1\34\5\0\17\34\3\0"+
    "\7\34\1\162\16\34\25\0\1\34\5\0\17\34\3\0"+
    "\10\34\1\163\15\34\25\0\1\34\5\0\17\34\3\0"+
    "\26\34\25\0\1\34\5\0\17\34\3\0\12\34\1\164"+
    "\13\34\25\0\1\34\5\0\10\34\1\165\6\34\3\0"+
    "\26\34\25\0\1\34\5\0\17\34\3\0\14\34\1\166"+
    "\11\34\25\0\1\34\5\0\12\34\1\167\4\34\3\0"+
    "\26\34\25\0\1\34\5\0\17\34\3\0\21\34\1\170"+
    "\4\34\25\0\1\34\5\0\17\34\3\0\10\34\1\171"+
    "\15\34\25\0\1\34\5\0\17\34\3\0\14\34\1\172"+
    "\11\34\25\0\1\34\5\0\17\34\3\0\17\34\1\173"+
    "\6\34\25\0\1\34\5\0\17\34\3\0\15\34\1\174"+
    "\10\34\25\0\1\34\5\0\17\34\3\0\4\34\1\175"+
    "\21\34\25\0\1\34\5\0\17\34\3\0\12\34\1\176"+
    "\10\34\1\177\2\34\25\0\1\34\5\0\17\34\3\0"+
    "\1\200\14\34\1\201\4\34\1\202\3\34\25\0\1\34"+
    "\5\0\17\34\3\0\5\34\1\203\20\34\25\0\1\34"+
    "\5\0\17\34\3\0\15\34\1\204\2\34\1\53\5\34"+
    "\25\0\1\34\5\0\17\34\3\0\14\34\1\205\2\34"+
    "\1\206\6\34\25\0\1\34\5\0\17\34\3\0\10\34"+
    "\1\207\15\34\25\0\1\34\5\0\17\34\3\0\4\34"+
    "\1\210\3\34\1\211\15\34\25\0\1\34\5\0\17\34"+
    "\3\0\4\34\1\212\14\34\1\213\4\34\25\0\1\34"+
    "\5\0\17\34\3\0\4\34\1\214\10\34\1\215\1\34"+
    "\1\216\6\34\25\0\1\34\5\0\17\34\3\0\14\34"+
    "\1\217\11\34\25\0\1\34\5\0\17\34\3\0\7\34"+
    "\1\220\16\34\2\0\2\67\1\0\2\67\1\0\2\67"+
    "\1\0\40\67\1\0\33\67\1\0\2\67\1\0\2\67"+
    "\1\0\4\67\1\221\4\67\1\222\26\67\1\0\31\67"+
    "\10\0\1\223\56\0\1\224\2\0\1\225\1\0\1\226"+
    "\101\0\1\150\7\0\3\152\3\0\7\152\1\227\65\152"+
    "\2\230\4\5\13\230\1\153\61\230\23\0\1\34\5\0"+
    "\17\34\3\0\1\231\25\34\25\0\1\34\5\0\17\34"+
    "\3\0\15\34\1\232\10\34\25\0\1\34\5\0\17\34"+
    "\3\0\1\233\25\34\25\0\1\34\5\0\17\34\3\0"+
    "\6\34\1\234\17\34\25\0\1\34\5\0\17\34\3\0"+
    "\15\34\1\235\10\34\25\0\1\34\5\0\6\34\1\236"+
    "\10\34\3\0\26\34\25\0\1\34\5\0\17\34\3\0"+
    "\21\34\1\237\4\34\25\0\1\34\5\0\16\34\1\240"+
    "\3\0\26\34\25\0\1\34\5\0\17\34\3\0\17\34"+
    "\1\241\6\34\25\0\1\34\5\0\17\34\3\0\13\34"+
    "\1\242\12\34\25\0\1\34\5\0\17\34\3\0\3\34"+
    "\1\243\22\34\25\0\1\34\5\0\17\34\3\0\4\34"+
    "\1\244\21\34\25\0\1\34\5\0\17\34\3\0\14\34"+
    "\1\245\11\34\25\0\1\34\5\0\17\34\3\0\12\34"+
    "\1\246\13\34\25\0\1\34\5\0\17\34\3\0\20\34"+
    "\1\247\5\34\25\0\1\34\5\0\17\34\3\0\4\34"+
    "\1\250\21\34\25\0\1\34\5\0\17\34\3\0\12\34"+
    "\1\251\13\34\25\0\1\34\5\0\17\34\3\0\17\34"+
    "\1\252\6\34\25\0\1\34\5\0\17\34\3\0\14\34"+
    "\1\253\11\34\25\0\1\34\5\0\17\34\3\0\3\34"+
    "\1\254\22\34\25\0\1\34\5\0\17\34\3\0\14\34"+
    "\1\255\11\34\25\0\1\34\5\0\17\34\3\0\1\256"+
    "\20\34\1\257\4\34\25\0\1\34\5\0\17\34\3\0"+
    "\20\34\1\260\5\34\25\0\1\34\5\0\17\34\3\0"+
    "\21\34\1\261\4\34\25\0\1\34\5\0\17\34\3\0"+
    "\1\262\14\34\1\263\10\34\25\0\1\34\5\0\17\34"+
    "\3\0\13\34\1\264\12\34\25\0\1\34\5\0\17\34"+
    "\3\0\22\34\1\265\3\34\25\0\1\34\5\0\17\34"+
    "\3\0\21\34\1\266\4\34\25\0\1\34\5\0\17\34"+
    "\3\0\10\34\1\267\15\34\2\0\2\221\1\152\2\67"+
    "\1\0\2\221\1\152\40\221\1\152\31\221\2\222\1\5"+
    "\2\67\1\5\2\222\1\230\40\222\1\230\31\222\3\152"+
    "\3\0\7\152\1\227\4\152\1\270\60\152\23\0\1\34"+
    "\5\0\17\34\3\0\12\34\1\271\13\34\25\0\1\34"+
    "\5\0\17\34\3\0\12\34\1\272\13\34\25\0\1\34"+
    "\5\0\17\34\3\0\17\34\1\273\6\34\25\0\1\34"+
    "\5\0\17\34\3\0\10\34\1\274\15\34\25\0\1\34"+
    "\5\0\17\34\3\0\1\275\25\34\25\0\1\34\5\0"+
    "\7\34\1\240\7\34\3\0\26\34\25\0\1\34\5\0"+
    "\17\34\3\0\10\34\1\276\15\34\25\0\1\34\5\0"+
    "\17\34\3\0\4\34\1\277\21\34\25\0\1\34\5\0"+
    "\17\34\3\0\1\300\25\34\25\0\1\34\5\0\17\34"+
    "\3\0\21\34\1\301\4\34\25\0\1\34\5\0\17\34"+
    "\3\0\1\302\25\34\25\0\1\34\5\0\17\34\3\0"+
    "\4\34\1\303\21\34\25\0\1\34\5\0\17\34\3\0"+
    "\17\34\1\304\6\34\25\0\1\34\5\0\17\34\3\0"+
    "\12\34\1\305\5\34\1\265\5\34\25\0\1\34\5\0"+
    "\17\34\3\0\22\34\1\306\3\34\25\0\1\34\5\0"+
    "\17\34\3\0\3\34\1\307\22\34\25\0\1\34\5\0"+
    "\17\34\3\0\22\34\1\310\3\34\25\0\1\34\5\0"+
    "\17\34\3\0\10\34\1\311\15\34\25\0\1\34\5\0"+
    "\17\34\3\0\17\34\1\312\6\34\25\0\1\34\5\0"+
    "\17\34\3\0\16\34\1\313\7\34\25\0\1\34\5\0"+
    "\17\34\3\0\16\34\1\314\7\34\25\0\1\34\5\0"+
    "\17\34\3\0\4\34\1\240\21\34\25\0\1\34\5\0"+
    "\17\34\3\0\10\34\1\315\15\34\25\0\1\34\5\0"+
    "\17\34\3\0\12\34\1\316\13\34\25\0\1\34\5\0"+
    "\17\34\3\0\15\34\1\317\10\34\25\0\1\34\5\0"+
    "\17\34\3\0\21\34\1\320\4\34\25\0\1\34\5\0"+
    "\17\34\3\0\21\34\1\321\4\34\25\0\1\34\5\0"+
    "\17\34\3\0\14\34\1\322\11\34\25\0\1\34\5\0"+
    "\17\34\3\0\11\34\1\323\14\34\25\0\1\34\5\0"+
    "\17\34\3\0\10\34\1\324\15\34\25\0\1\34\5\0"+
    "\17\34\3\0\25\34\1\325\25\0\1\34\5\0\17\34"+
    "\3\0\25\34\1\326\25\0\1\34\5\0\17\34\3\0"+
    "\10\34\1\327\15\34\25\0\1\34\5\0\17\34\3\0"+
    "\12\34\1\330\13\34\25\0\1\34\5\0\17\34\3\0"+
    "\17\34\1\331\6\34\25\0\1\34\5\0\17\34\3\0"+
    "\14\34\1\332\11\34\25\0\1\34\5\0\17\34\3\0"+
    "\21\34\1\333\4\34\25\0\1\34\5\0\17\34\3\0"+
    "\12\34\1\334\13\34\25\0\1\34\5\0\17\34\3\0"+
    "\12\34\1\335\13\34\25\0\1\34\5\0\17\34\3\0"+
    "\4\34\1\336\21\34\25\0\1\34\5\0\17\34\3\0"+
    "\6\34\1\337\17\34\25\0\1\34\5\0\17\34\3\0"+
    "\1\340\25\34\25\0\1\34\5\0\17\34\3\0\6\34"+
    "\1\341\17\34\25\0\1\34\5\0\17\34\3\0\14\34"+
    "\1\342\11\34\25\0\1\34\5\0\17\34\3\0\14\34"+
    "\1\343\11\34\25\0\1\34\5\0\17\34\3\0\4\34"+
    "\1\344\21\34\25\0\1\34\5\0\17\34\3\0\14\34"+
    "\1\345\11\34\25\0\1\34\5\0\17\34\3\0\6\34"+
    "\1\346\17\34\25\0\1\34\5\0\17\34\3\0\1\347"+
    "\25\34\25\0\1\34\5\0\10\34\1\350\1\34\1\351"+
    "\4\34\3\0\26\34\25\0\1\34\5\0\17\34\3\0"+
    "\12\34\1\352\13\34\25\0\1\34\5\0\17\34\3\0"+
    "\22\34\1\353\3\34\25\0\1\34\5\0\17\34\3\0"+
    "\6\34\1\354\17\34\25\0\1\34\5\0\17\34\3\0"+
    "\21\34\1\355\4\34\25\0\1\34\5\0\17\34\3\0"+
    "\14\34\1\356\11\34\25\0\1\34\5\0\17\34\3\0"+
    "\22\34\1\357\3\34\25\0\1\34\5\0\10\34\1\360"+
    "\1\34\1\361\4\34\3\0\26\34\25\0\1\34\5\0"+
    "\17\34\3\0\4\34\1\362\21\34\25\0\1\34\5\0"+
    "\17\34\3\0\4\34\1\363\21\34\25\0\1\34\5\0"+
    "\17\34\3\0\16\34\1\364\7\34\25\0\1\34\5\0"+
    "\17\34\3\0\21\34\1\365\4\34\25\0\1\34\5\0"+
    "\17\34\3\0\14\34\1\366\11\34\25\0\1\34\5\0"+
    "\17\34\3\0\22\34\1\367\3\34\25\0\1\34\5\0"+
    "\17\34\3\0\22\34\1\370\3\34\25\0\1\34\5\0"+
    "\17\34\3\0\16\34\1\371\7\34\25\0\1\34\5\0"+
    "\17\34\3\0\16\34\1\372\7\34\25\0\1\34\5\0"+
    "\17\34\3\0\21\34\1\373\4\34\25\0\1\34\5\0"+
    "\17\34\3\0\21\34\1\374\4\34\25\0\1\34\5\0"+
    "\17\34\3\0\22\34\1\375\3\34\25\0\1\34\5\0"+
    "\17\34\3\0\22\34\1\376\3\34\25\0\1\34\5\0"+
    "\17\34\3\0\16\34\1\377\7\34\25\0\1\34\5\0"+
    "\13\34\1\u0100\3\34\3\0\26\34\25\0\1\34\5\0"+
    "\17\34\3\0\21\34\1\u0101\4\34\25\0\1\34\5\0"+
    "\17\34\3\0\21\34\1\u0102\4\34\25\0\1\34\5\0"+
    "\17\34\3\0\22\34\1\u0103\3\34\25\0\1\34\5\0"+
    "\17\34\3\0\10\34\1\u0104\15\34\25\0\1\34\5\0"+
    "\13\34\1\u0105\3\34\3\0\26\34\25\0\1\34\5\0"+
    "\13\34\1\u0106\3\34\3\0\26\34\25\0\1\34\5\0"+
    "\17\34\3\0\21\34\1\u0107\4\34\25\0\1\34\5\0"+
    "\17\34\3\0\14\34\1\u0108\11\34\25\0\1\34\5\0"+
    "\17\34\3\0\10\34\1\u0109\15\34\25\0\1\34\5\0"+
    "\17\34\3\0\10\34\1\u010a\15\34\25\0\1\34\5\0"+
    "\13\34\1\u010b\3\34\3\0\26\34\25\0\1\34\5\0"+
    "\17\34\3\0\14\34\1\u010c\11\34\25\0\1\34\5\0"+
    "\17\34\3\0\14\34\1\u010d\11\34\25\0\1\34\5\0"+
    "\17\34\3\0\10\34\1\u010e\15\34\25\0\1\34\5\0"+
    "\17\34\3\0\14\34\1\u010f\11\34\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11122];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\1\1\1\11\1\1\3\11\2\1\1\11"+
    "\4\1\2\11\16\1\2\11\20\1\2\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\11\43\1\5\11\1\1\1\11"+
    "\1\1\2\0\4\11\43\1\4\11\1\0\170\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
   StringBuffer string = new StringBuffer();

   private Symbol symbol(SymType type) {
      return new Symbol(type, yyline, yycolumn);
   }
   private Symbol symbol(SymType type, Object value) {
      return new Symbol(type, yyline, yycolumn, value);
   }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DumplingLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error");
            }
            // fall through
          case 79: break;
          case 2:
            { 
            }
            // fall through
          case 80: break;
          case 3:
            { return symbol(SymType.NOT);
            }
            // fall through
          case 81: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 82: break;
          case 5:
            { return symbol(SymType.MODULO);
            }
            // fall through
          case 83: break;
          case 6:
            { string.setLength(0); yybegin(CHAR);
            }
            // fall through
          case 84: break;
          case 7:
            { return symbol(SymType.LPAREN);
            }
            // fall through
          case 85: break;
          case 8:
            { return symbol(SymType.RPAREN);
            }
            // fall through
          case 86: break;
          case 9:
            { return symbol(SymType.MULTIPLICATION);
            }
            // fall through
          case 87: break;
          case 10:
            { return symbol(SymType.ADDITION);
            }
            // fall through
          case 88: break;
          case 11:
            { return symbol(SymType.COMMA);
            }
            // fall through
          case 89: break;
          case 12:
            { return symbol(SymType.SUBTRACTION);
            }
            // fall through
          case 90: break;
          case 13:
            { return symbol(SymType.DIVISION);
            }
            // fall through
          case 91: break;
          case 14:
            { return symbol(SymType.INTLITERAL, yytext());
            }
            // fall through
          case 92: break;
          case 15:
            { return symbol(SymType.COLON);
            }
            // fall through
          case 93: break;
          case 16:
            { return symbol(SymType.SEMICOLON);
            }
            // fall through
          case 94: break;
          case 17:
            { return symbol(SymType.LESSTHAN);
            }
            // fall through
          case 95: break;
          case 18:
            { return symbol(SymType.ASSIGN);
            }
            // fall through
          case 96: break;
          case 19:
            { return symbol(SymType.GREATERTHAN);
            }
            // fall through
          case 97: break;
          case 20:
            { return symbol(SymType.IDENTIFIER, yytext());
            }
            // fall through
          case 98: break;
          case 21:
            { return symbol(SymType.LBRACKET);
            }
            // fall through
          case 99: break;
          case 22:
            { return symbol(SymType.RBRACKET);
            }
            // fall through
          case 100: break;
          case 23:
            { return symbol(SymType.TIMELITERAL, yytext());
            }
            // fall through
          case 101: break;
          case 24:
            { return symbol(SymType.LBRACE);
            }
            // fall through
          case 102: break;
          case 25:
            { return symbol(SymType.RBRACE);
            }
            // fall through
          case 103: break;
          case 26:
            { string.append(yytext());
            }
            // fall through
          case 104: break;
          case 27:
            { yybegin(YYINITIAL); return symbol(SymType.STRING, string.toString());
            }
            // fall through
          case 105: break;
          case 28:
            { string.append('\\');
            }
            // fall through
          case 106: break;
          case 29:
            { yybegin(YYINITIAL); return symbol(SymType.CHAR, string.toString());
            }
            // fall through
          case 107: break;
          case 30:
            { return symbol(SymType.NOTEQUAL);
            }
            // fall through
          case 108: break;
          case 31:
            { return symbol(SymType.MODULOASSIGN);
            }
            // fall through
          case 109: break;
          case 32:
            { return symbol(SymType.MULTIPLICATIONASSIGN);
            }
            // fall through
          case 110: break;
          case 33:
            { return symbol(SymType.ADDITIONASSIGN);
            }
            // fall through
          case 111: break;
          case 34:
            { return symbol(SymType.SUBTRACTIONASSIGN);
            }
            // fall through
          case 112: break;
          case 35:
            { return symbol(SymType.FLOATLITERAL, yytext());
            }
            // fall through
          case 113: break;
          case 36:
            { return symbol(SymType.DIVISIONASSIGN);
            }
            // fall through
          case 114: break;
          case 37:
            { return symbol(SymType.LESSTHANOREQUALTO);
            }
            // fall through
          case 115: break;
          case 38:
            { return symbol(SymType.EQUAL);
            }
            // fall through
          case 116: break;
          case 39:
            { return symbol(SymType.GREATERTHANOREQUALTO);
            }
            // fall through
          case 117: break;
          case 40:
            { return symbol(SymType.IF);
            }
            // fall through
          case 118: break;
          case 41:
            { return symbol(SymType.ON);
            }
            // fall through
          case 119: break;
          case 42:
            { return symbol(SymType.OR);
            }
            // fall through
          case 120: break;
          case 43:
            { return symbol(SymType.TO);
            }
            // fall through
          case 121: break;
          case 44:
            { string.append('\"');
            }
            // fall through
          case 122: break;
          case 45:
            { string.append('\n');
            }
            // fall through
          case 123: break;
          case 46:
            { string.append('\r');
            }
            // fall through
          case 124: break;
          case 47:
            { string.append('\t');
            }
            // fall through
          case 125: break;
          case 48:
            { return symbol(SymType.INTTYPE);
            }
            // fall through
          case 126: break;
          case 49:
            { return symbol(SymType.BOOLLITERAL, yytext());
            }
            // fall through
          case 127: break;
          case 50:
            { return symbol(SymType.AND);
            }
            // fall through
          case 128: break;
          case 51:
            { return symbol(SymType.FOR);
            }
            // fall through
          case 129: break;
          case 52:
            { return symbol(SymType.FUN);
            }
            // fall through
          case 130: break;
          case 53:
            { return symbol(SymType.PIN);
            }
            // fall through
          case 131: break;
          case 54:
            { return symbol(SymType.SET);
            }
            // fall through
          case 132: break;
          case 55:
            { return symbol(SymType.BOOLTYPE);
            }
            // fall through
          case 133: break;
          case 56:
            { return symbol(SymType.CHARTYPE);
            }
            // fall through
          case 134: break;
          case 57:
            { return symbol(SymType.TIME);
            }
            // fall through
          case 135: break;
          case 58:
            { return symbol(SymType.ELSE);
            }
            // fall through
          case 136: break;
          case 59:
            { return symbol(SymType.READ);
            }
            // fall through
          case 137: break;
          case 60:
            { return symbol(SymType.STOP);
            }
            // fall through
          case 138: break;
          case 61:
            { return symbol(SymType.FLOATTYPE);
            }
            // fall through
          case 139: break;
          case 62:
            { return symbol(SymType.BREAK);
            }
            // fall through
          case 140: break;
          case 63:
            { return symbol(SymType.DELAY);
            }
            // fall through
          case 141: break;
          case 64:
            { return symbol(SymType.EVERY);
            }
            // fall through
          case 142: break;
          case 65:
            { return symbol(SymType.START);
            }
            // fall through
          case 143: break;
          case 66:
            { return symbol(SymType.UNTIL);
            }
            // fall through
          case 144: break;
          case 67:
            { return symbol(SymType.WHILE);
            }
            // fall through
          case 145: break;
          case 68:
            { return symbol(SymType.STRINGTYPE);
            }
            // fall through
          case 146: break;
          case 69:
            { return symbol(SymType.MODULE);
            }
            // fall through
          case 147: break;
          case 70:
            { return symbol(SymType.RETURN);
            }
            // fall through
          case 148: break;
          case 71:
            { return symbol(SymType.RISING);
            }
            // fall through
          case 149: break;
          case 72:
            { return symbol(SymType.FALLING);
            }
            // fall through
          case 150: break;
          case 73:
            { return symbol(SymType.CONTINUE);
            }
            // fall through
          case 151: break;
          case 74:
            { return symbol(SymType.TEMPLATE);
            }
            // fall through
          case 152: break;
          case 75:
            { return symbol(SymType.ANALOGINPUTPINTYPE);
            }
            // fall through
          case 153: break;
          case 76:
            { return symbol(SymType.ANALOGOUTPUTPINTYPE);
            }
            // fall through
          case 154: break;
          case 77:
            { return symbol(SymType.DIGITALINPUTPINTYPE);
            }
            // fall through
          case 155: break;
          case 78:
            { return symbol(SymType.DIGITALOUTPUTPINTYPE);
            }
            // fall through
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
