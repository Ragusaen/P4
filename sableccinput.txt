Package sablecc;

Helpers
    all = [0 .. 0xFFFF];
    anychar = ['A' .. 'Z'] | ['a' .. 'z'] | '_';
    digit = ['0' .. '9'];
    tab = 9;
    cr = 13;
    lf = 10;
    eol = cr lf | cr | lf;
    noteol = [all - [cr + lf]];
    boolliteral = ('false'|'true'|'HIGH'|'LOW');
    intliteral = '-'?digit+;
    floatliteral = '-'?(digit+('.'digit*)?|'.'digit+);
    timeliteral = (intliteral | floatliteral)('ms'|'s'|'m'|'h');
    stringliteral = '"'('\'all | [[all - '"'] - '\'])*'"';
    digitalpinliteral = 'D'digit+;
    analogpinliteral = 'A'digit+;

Tokens
    stringtype = 'String';
    inttype = 'Int';
    int8type = 'Int8';
    int16type = 'Int16';
    int32type = 'Int32';
    int64type = 'Int64';
    uinttype = 'Uint';
    uint8type = 'Uint8';
    uint16type = 'Uint16';
    uint32type = 'Uint32';
    uint64type = 'Uint64';
    floattype = 'Float';
    booltype = 'Bool';
    timetype = 'Time';
    digitaloutputpintype = 'DigitalOutputPin';
    digitalinputpintype = 'DigitalInputPin';
    analogoutputpintype = 'AnalogOutputPin';
    analoginputpintype = 'AnalogInputPin';
    every = 'every';
    if = 'if';
    on = 'on';
    else = 'else';
    while = 'while';
    for = 'for';
    in = 'in';
    step = 'step';
    break = 'break';
    continue = 'continue';
    delay = 'delay';
    until = 'until';
    set = 'set';
    to = 'to';
    read = 'read';
    start = 'start';
    stop = 'stop';
    and = 'and';
    or = 'or';
    init = 'init';
    critical = 'critical';
    sleep = 'sleep';
    usleep = 'usleep';
    assign = '=';
    equal = '==';
    notequal = '!=';
    addition = '+';
    subtraction = '-';
    multiplication = '*';
    division = '/';
    modulo = '%';
    greaterthan = '>';
    lessthan = '<';
    greaterthanorequalto = '>=';
    lessthanorequalto = '<=';
    additionassign = '+=';
    subtractionassign = '-=';
    multiplicationassign = '*=';
    divisionassign = '/=';
    moduloassign = '%=';
    not = '!';
    colon = ':';
    comma = ',';
    return = 'return';
    template = 'template';
    fun = 'fun';
    module = 'module';
    lparen = '(';
    rparen = ')';
    lbrace = '{';
    rbrace = '}';
    lbracket = '[';
    rbracket = ']';
    boolliteral = boolliteral;
    intliteral = intliteral;
    floatliteral = floatliteral;
    timeliteral = timeliteral;
    stringliteral = stringliteral;
    whitespace = (' ' | tab)+;
    eol = eol;
    comment = '/*' all* '*/' eol | '//'noteol* eol;
    digitalpinliteral = digitalpinliteral;
    analogpinliteral = analogpinliteral;
    identifier = anychar (anychar|digit)*;

Ignored Tokens
    whitespace, comment;

Productions
    program = root_element*;

    root_element {-> root_element} =
        {dcl} dcl_stmt
            {-> New root_element.dcl(dcl_stmt.stmt)}
        | {module} moduledcl
            {-> New root_element.moduledcl(moduledcl)}
        | {function} functiondcl
            {-> New root_element.functiondcl(functiondcl)}
        | {init} init stmt
            {-> New root_element.init(init, stmt)};

/* Function */
    functiondcl {-> functiondcl} =
        fun identifier lparen paramlist? rparen return_type? eol? [body]:stmt
            {-> New functiondcl(identifier, [paramlist.param], return_type.type, body.stmt)};

    return_type {-> type} =
        colon type
            {-> type};

    paramlist {-> param*} =
        type identifier paramtail*
            {-> [New param(identifier, type), paramtail.param]};

    paramtail {-> param} =
        comma type identifier
            {-> New param(identifier, type)};

    arglist {-> expr*} =
        expr argtail*
            {-> [expr, argtail.expr]};

    argtail {-> expr} =
        comma expr
            {-> expr};

/* Module */
    moduledcl {-> moduledcl} =
        {template} template module identifier params? inner_module
            {-> New moduledcl.template(identifier, [params.param], inner_module)}
        | {named} module identifier inner_module
            {-> New moduledcl.instance(identifier, inner_module)}
        | {anonymous_no_dcls} module_structure
            {-> New moduledcl.instance(Null, New inner_module([], module_structure))};

    params {-> param*} =
        lparen paramlist rparen
            {-> [paramlist.param]};

    inner_module {-> inner_module} =
        lbrace [start]:eol? dcl_stmt* module_structure rbrace [end]:eol?
            {-> New inner_module([dcl_stmt.stmt], module_structure)};

    dcl_stmt {-> stmt} = dcl eol
        {-> dcl.stmt};

    module_structure {-> module_structure} =
        {every} every lparen expr rparen eol? stmt
            {-> New module_structure.every(expr, stmt)}
        | {on} on lparen expr rparen eol? stmt
            {-> New module_structure.on(expr, stmt)};

/* Statement */
    stmt {-> stmt} =
        {matched} matched
            {-> matched.stmt}
        | {unmatched} unmatched
            {-> unmatched.stmt};

    matched {-> stmt} =
        {matched_if_else} if lparen [condition]:expr rparen [start]:eol? [if_body]:matched else [end]:eol? [else_body]:matched
            {-> New stmt.if(condition, if_body.stmt, else_body.stmt)}
        | {while} while lparen [condition]:expr rparen eol? [body]:matched
            {-> New stmt.while(condition, body.stmt)}
        | {for} for lparen identifier in [lower]:expr to [upper]:expr forstep? rparen eol? [body]:matched
            {-> New stmt.for(identifier, lower, upper, forstep.expr, body.stmt)}
        | {critical} critical eol? [body]:matched
            {-> New stmt.critical(body.stmt)}
        | {single_stmt} single_stmt eol
            {-> single_stmt.stmt}
        | {block} lbrace [start]:eol? stmt* rbrace [end]:eol?
            {-> New stmt.block([stmt])};

    unmatched {-> stmt} =
        {unmatched_if_simple} if lparen [condition]:expr rparen eol? stmt
            {-> New stmt.if(condition, stmt, Null)}
        | {unmatched_if_else} if lparen [condition]:expr rparen [start]:eol? matched else [end]:eol? unmatched
            {-> New stmt.if(condition, matched.stmt, unmatched.stmt)}
        | {while} while lparen [condition]:expr rparen eol? [body]:unmatched
            {-> New stmt.while(condition, body.stmt)}
        | {for} for lparen identifier in [lower]:expr to [upper]:expr forstep? rparen eol? [body]:unmatched
            {-> New stmt.for(identifier, lower, upper, forstep.expr, body.stmt)}
        | {critical} critical eol? [body]:unmatched
            {-> New stmt.critical(body.stmt)};

    forstep {-> expr} =
        step expr
            {-> expr};

    single_stmt {-> stmt} =
        {dcl} dcl
            {-> dcl.stmt}
        | {assign} identifier assign expr
            {-> New stmt.assign(identifier, expr, Null)}
        | {set_to} set [pin]:expr to [value]:expr
            {-> New stmt.set_to(pin, value)}
        | {additionassign} identifier additionassign expr
            {-> New stmt.assign(identifier, expr, New binop.addition())}
        | {subtractionassign} identifier subtractionassign expr
            {-> New stmt.assign(identifier, expr, New binop.subtraction())}
        | {divisionassign} identifier divisionassign expr
            {-> New stmt.assign(identifier, expr, New binop.division())}
        | {multiplicationassign} identifier multiplicationassign expr
            {-> New stmt.assign(identifier, expr, New binop.multiplication())}
        | {moduloassign} identifier moduloassign expr
            {-> New stmt.assign(identifier, expr, New binop.modulo())}
        | {start} start identifier
            {-> New stmt.start(start, identifier)}
        | {stop} stop identifier?
            {-> New stmt.stop(stop, identifier)}
        | {delay} delay expr
            {-> New stmt.delay(delay, expr)}
        | {delay_until} delay until expr
            {-> New stmt.delayuntil(delay, expr)}
        | {return} return expr?
            {-> New stmt.return(return, expr)}
        | {function_call} identifier lparen arglist? rparen
            {-> New stmt.expr(New expr.function_call(identifier, [arglist.expr]))}
        | {break} break
            {-> New stmt.break(break)}
        | {continue} continue
            {-> New stmt.continue(continue)}
        | {sleep} sleep expr
            {-> New stmt.sleep(expr)}
        | {usleep} usleep expr
            {-> New stmt.usleep(expr)};


/* Declaration */
    dcl {-> stmt} =
        {vardcl} type vardcls
            {-> New stmt.dcl(type, [vardcls.vardcl])}
        | {module_dcl} module [template]:identifier [instance]:identifier arguments?
            {-> New stmt.moduledcl(template, instance, [arguments.expr])};

    arguments {-> expr*} =
        lparen arglist rparen
            {-> [arglist.expr]};

    vardcls {-> vardcl* } =
        varinit vardcls_tail*
            {-> [varinit.vardcl, vardcls_tail.vardcl]};

    vardcls_tail {-> vardcl} =
        comma varinit
            {-> varinit.vardcl};

    varinit {-> vardcl} =
        {no_init} identifier
            {-> New vardcl(identifier, Null)}
        | {init} identifier assign expr
            {-> New vardcl(identifier, expr)};

    type {-> type} =
        {string} stringtype {-> New type.string()}
        | {int} inttype {-> New type.int()}
        | {int8} int8type {-> New type.int8()}
        | {int16} int16type {-> New type.int16()}
        | {int32} int32type {-> New type.int32()}
        | {int64} int64type {-> New type.int64()}
        | {uint} uinttype {-> New type.uint()}
        | {uint8} uint8type {-> New type.uint8()}
        | {uint16} uint16type {-> New type.uint16()}
        | {uint32} uint32type {-> New type.uint32()}
        | {uint64} uint64type {-> New type.uint64()}
        | {float} floattype {-> New type.float()}
        | {bool} booltype {-> New type.bool()}
        | {time} timetype {-> New type.time()}
        | {array} type lbracket expr? rbracket {-> New type.array(type, expr)}
        | {digitaloutputpin} digitaloutputpintype {-> New type.digitaloutputpin()}
        | {digitalinputpin} digitalinputpintype {-> New type.digitalinputpin()}
        | {analogoutputpin} analogoutputpintype {-> New type.analogoutputpin()}
        | {analoginputpin} analoginputpintype {-> New type.analoginputpin()};

/* Expression */
    expr {-> expr} =
        {orexpr} orexpr
            {-> orexpr.expr};

    orexpr {-> expr} =
        {or} orexpr or andexpr
            {-> New expr.binop(orexpr.expr, New binop.or(), andexpr.expr)}
        | {andexpr} andexpr
            {-> andexpr.expr};

    andexpr {-> expr} =
        {and} andexpr and equalsexpr
            {-> New expr.binop(andexpr.expr, New binop.and(), equalsexpr.expr)}
        | {equalsexpr} equalsexpr
            {-> equalsexpr.expr};

    equalsexpr {-> expr} =
        {equals} equalsexpr equal relation
            {-> New expr.binop(equalsexpr.expr, New binop.equal(), relation.expr)}
        | {not_equals} equalsexpr notequal relation
            {-> New expr.unop(New unop.not(), New expr.binop(equalsexpr.expr, New binop.equal(), relation.expr))}
        | {relation} relation
            {-> relation.expr};

    relation {-> expr} =
        {greaterthan} relation greaterthan read_expr
            {-> New expr.binop(relation.expr, New binop.greaterthan(), read_expr.expr)}
        | {lessthan} relation lessthan read_expr
            {-> New expr.binop(relation.expr, New binop.lessthan(), read_expr.expr)}
        | {lessthanorequalto} relation lessthanorequalto read_expr
            {-> New expr.binop(relation.expr, New binop.lessthanorequal(), read_expr.expr)}
        | {greaterthanorequalto} relation greaterthanorequalto read_expr
            {-> New expr.binop(relation.expr, New binop.greaterthanorequal(), read_expr.expr)}
        | {read} read_expr
            {-> read_expr.expr};

    read_expr {-> expr} =
        {read} read [pin]:term
            {-> New expr.read(pin.expr)}
        | {term} term
            {-> term.expr};

    term {-> expr} =
        {addition} term addition factor
            {-> New expr.binop(term.expr, New binop.addition(), factor.expr)}
        | {subtraction} term subtraction factor
            {-> New expr.binop(term.expr, New binop.subtraction(), factor.expr)}
        | {factor} factor
            {-> factor.expr};

    factor {-> expr} =
        {multiplication} factor multiplication unary
            {-> New expr.binop(factor.expr, New binop.multiplication(), unary.expr)}
        | {division} factor division unary
            {-> New expr.binop(factor.expr, New binop.division(), unary.expr)}
        | {modulo} factor modulo unary
            {-> New expr.binop(factor.expr, New binop.modulo(), unary.expr)}
        | {unary} unary
            {-> unary.expr};

    unary {->expr} =
        {plus} addition parenthesis
            {-> New expr.unop(New unop.plus(), parenthesis.expr)}
        | {minus} subtraction parenthesis
            {-> New expr.unop(New unop.minus(), parenthesis.expr)}
        | {not} not parenthesis
            {-> New expr.unop(New unop.not(), parenthesis.expr)}
        | {parenthesis} parenthesis
            {->parenthesis.expr};

    parenthesis {-> expr} =
        {parenthesis} lparen expr rparen
            {-> New expr.parenthesis(expr)}
        | {index} index
            {-> index.expr};

    index {-> expr} =
        {index} value lbracket expr rbracket
            {-> New expr.index(value.expr, expr)}
        | {value} value
            {-> value.expr};

    value {-> expr} =
        {identifier} identifier
            {-> New expr.value(New value.identifier(identifier))}
        | {function_call} identifier lparen arglist? rparen
            {-> New expr.function_call(identifier, [arglist.expr])}
        | {literal} literal
            {-> literal.expr};

    literal {-> expr} =
        {int} intliteral
            {-> New expr.value(New value.int(intliteral))}
        | {float} floatliteral
            {-> New expr.value(New value.float(floatliteral))}
        | {string} stringliteral
            {-> New expr.value(New value.string(stringliteral))}
        | {bool} boolliteral
            {-> New expr.value(New value.bool(boolliteral))}
        | {time} timeliteral
            {-> New expr.value(New value.time(timeliteral))}
        | {array} lbracket arglist rbracket
            {-> New expr.value(New value.array([arglist.expr]))}
        | {digitalpinliteral} digitalpinliteral
            {-> New expr.value(New value.digitalpin(digitalpinliteral))}
        | {analogpinliteral} analogpinliteral
            {-> New expr.value(New value.analogpin(analogpinliteral))};

Abstract Syntax Tree
    program = root_element*;
    root_element = {dcl} stmt | {moduledcl} moduledcl | {functiondcl} functiondcl | {init} [token]:init stmt;

/* Function */
    functiondcl = identifier param* type? [body]:stmt;
    param = identifier type;

/* Module */
    moduledcl = {template} identifier param* inner_module | {instance} identifier? inner_module;
    inner_module = [dcls]:stmt* module_structure;
    module_structure = {every} expr [body]:stmt | {on} expr [body]:stmt;

/* Statement */
    stmt = {dcl} type vardcl* | {moduledcl} [template]:identifier [instance]:identifier expr* | {start} [token]:start identifier | {stop} [token]:stop identifier? | {set_to} [pin]:expr [value]:expr | {delay} [token]:delay expr | {delayuntil} [token]:delay expr | {assign} identifier expr binop? | {block} stmt* | {if} [condition]:expr [if_body]:stmt [else_body]:stmt? | {while} [condition]:expr [body]:stmt | {for} identifier [lower]:expr [upper]:expr [step]:expr? [body]:stmt | {expr} expr | {return} [token]:return expr? | {break} [token]:break | {continue} [token]:continue | {critical} [body]:stmt | {sleep} expr | {usleep} expr;

/* Declaration subnodes */
    vardcl = identifier expr?;
    type = {string} | {int} | {int8} | {int16} | {int32} | {int64} | {uint} | {uint8} | {uint16} | {uint32} | {uint64} | {float} | {bool} | {time} | {digitaloutputpin} | {digitalinputpin} | {analogoutputpin} | {analoginputpin} | {array} type [size]:expr?;

/* Expression */
    expr = {parenthesis} expr | {binop} [l]:expr binop [r]:expr | {unop} unop expr | {function_call} identifier expr* | {value} value | {index} [value]:expr [index]:expr | {read} [pin]:expr;
    binop = {addition} | {subtraction} | {multiplication} | {division} | {modulo} | {or} | {and} | {equal} | {greaterthan} | {lessthan} | {greaterthanorequal} | {lessthanorequal};
    unop = {minus} | {plus} | {not};
    value = {identifier} identifier | {int} intliteral | {float} floatliteral | {string} stringliteral | {bool} boolliteral | {time} timeliteral | {array} expr* | {digitalpin} digitalpinliteral | {analogpin} analogpinliteral;